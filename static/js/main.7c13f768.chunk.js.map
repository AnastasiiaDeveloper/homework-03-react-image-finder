{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","query","multiplier","key","url","fetch","response","json","images","hits","onSubmit","this","Component","SearchBar","state","loadMore","setState","document","getElementById","value","getQuery","props","className","type","onClick","search","id","autoComplete","autoFocus","placeholder","length","ImageGallery","map","image","preview","webformatURL","largeImage","largeImageURL","ImageGalleryItem","src","modal","modalImg","style","display","window","onclick","event","target","showModal","Modal","Button","scrollTo","top","documentElement","scrollHeight","behavior","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAeMA,G,sNACWC,G,kGAAOC,E,+BAAa,EAC3BC,EAAM,qCACNC,E,qCAAoCH,E,uBAAoBE,E,6DAAwD,GAAKD,G,SACpGG,MAAMD,G,cAAvBE,E,gBACeA,EAASC,O,cAAxBC,E,yBAECA,EAAOC,M,kIAId,OACE,kBAAC,EAAD,CAAWC,SAAUC,KAAKD,e,GAZdE,cAiBZC,E,4MACJC,MAAQ,CACNN,OAAQ,I,EAcVO,SAAW,SAAAP,GAAM,OAAI,EAAKQ,SAAS,CAAER,Y,yDATnC,OADcS,SAASC,eAAe,UACzBC,Q,wJAIPlB,EAAQU,KAAKS,W,SACET,KAAKU,MAAMX,SAAST,G,OAAnCO,E,OACNG,KAAKK,SAAS,CAAER,W,qIAKR,IAAD,OACP,OACE,oCACE,4BAAQc,UAAU,aAChB,yBAAKA,UAAU,cACb,4BACEC,KAAK,SACLD,UAAU,oBACVE,QAAS,kBAAM,EAAKC,WAEpB,0BAAMH,UAAU,2BAAhB,WAIF,2BACEI,GAAG,SACHJ,UAAU,mBACVC,KAAK,OACLI,aAAa,MACbC,WAAS,EACTC,YAAY,+BAIlB,kBAAC,EAAD,CAAcrB,OAAQG,KAAKG,MAAMN,SACjC,kBAAC,EAAD,MACCG,KAAKG,MAAMN,OAAOsB,OAAS,EAC1B,kBAAC,EAAD,CACE7B,MAAOU,KAAKS,WACZV,SAAUC,KAAKU,MAAMX,SACrBK,SAAUJ,KAAKI,WAEjB,U,GAlDcH,aAwDlBmB,EAAe,SAAAV,GAAK,OACxB,wBAAIC,UAAU,gBACXD,EAAMb,OAAOwB,KAAI,SAAAC,GAAK,OACrB,kBAAC,EAAD,CACEC,QAASD,EAAME,aACfC,WAAYH,EAAMI,qBAKpBC,E,wKACMC,GACR,IAAMC,EAAQvB,SAASC,eAAe,SAChCuB,EAAWxB,SAASC,eAAe,YAEzCsB,EAAME,MAAMC,QAAU,QACtBF,EAASF,IAAMA,EAEfK,OAAOC,QAAU,SAAAC,GACXA,EAAMC,SAAWP,IACnBA,EAAME,MAAMC,QAAU,W,+BAKlB,IAAD,OACP,OACE,wBAAIrB,UAAU,oBACZ,yBACEiB,IAAK5B,KAAKU,MAAMa,QAChBZ,UAAU,yBACVE,QAAS,kBAAM,EAAKwB,UAAU,EAAK3B,MAAMe,oB,GArBpBxB,aA4BzBqC,EAAQ,kBACZ,yBACEvB,GAAG,QACHJ,UAAU,SAEV,yBACEA,UAAU,gBACVI,GAAG,eAKHwB,E,4MACJjD,MAAQ,G,EACRC,WAAa,E,gLAGNS,KAAKV,QACRU,KAAKV,MAAQU,KAAKU,MAAMpB,OAGtBU,KAAKV,QAAUU,KAAKU,MAAMpB,QAC5BU,KAAKV,MAAQU,KAAKU,MAAMpB,MACxBU,KAAKT,WAAa,G,SAGCS,KAAKU,MAAMX,SAASC,KAAKV,MAAOU,KAAKT,c,OAApDM,E,OACNG,KAAKU,MAAMN,SAASP,GAEpBoC,OAAOO,SAAS,CACdC,IAAKnC,SAASoC,gBAAgBC,aAC9BC,SAAU,W,qIAIJ,IAAD,OACP,OACE,4BACEjC,UAAU,SACVE,QAAS,kBAAM,EAAKT,aAFtB,oB,GAzBeH,aAmCNZ,ICjKKwD,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACA5C,SAASC,eAAe,SD2HpB,kBAAmB4C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7c13f768.chunk.js","sourcesContent":["// import React from 'react'\n// import Loader from './Components/Loader'\n\n// const App =() =>\n//     (\n//     <>\n//     <Loader/>\n//     </>\n//   )\n\n// export default App;\n\nimport React, { Component } from 'react'\nimport './App.css'\n\nclass App extends Component {\n  async onSubmit(query, multiplier = 1) {\n    const key = '17979283-965b1254f018720ae64398a3a'\n    const url = `https://pixabay.com/api/?q=${query}&page=1&key=${key}&image_type=photo&orientation=horizontal&per_page=${15 * multiplier}`\n    const response = await fetch(url)\n    const images = await response.json()\n\n    return images.hits\n  }\n\n  render() {\n    return (\n      <SearchBar onSubmit={this.onSubmit} />\n    )\n  }\n}\n\nclass SearchBar extends Component {\n  state = {\n    images: [],\n  }\n\n  getQuery() {\n    const input = document.getElementById('search')\n    return input.value\n  }\n\n  async search() {\n    const query = this.getQuery()\n    const images = await this.props.onSubmit(query)\n    this.setState({ images })\n  }\n\n  loadMore = images => this.setState({ images })\n\n  render() {\n    return (\n      <>\n        <header className=\"Searchbar\">\n          <div className=\"SearchForm\">\n            <button\n              type=\"submit\"\n              className=\"SearchForm-button\"\n              onClick={() => this.search()}\n            >\n              <span className=\"SearchForm-button-label\">\n                Search\n              </span>\n            </button>\n            <input\n              id=\"search\"\n              className=\"SearchForm-input\"\n              type=\"text\"\n              autoComplete=\"off\"\n              autoFocus\n              placeholder=\"Search images and photos\"\n            />\n          </div>\n        </header>\n        <ImageGallery images={this.state.images} />\n        <Modal />\n        {this.state.images.length > 0 ?\n          <Button\n            query={this.getQuery()}\n            onSubmit={this.props.onSubmit}\n            loadMore={this.loadMore}\n          /> :\n          null}\n      </>\n    )\n  }\n}\n\nconst ImageGallery = props => (\n  <ul className=\"ImageGallery\">\n    {props.images.map(image =>\n      <ImageGalleryItem\n        preview={image.webformatURL}\n        largeImage={image.largeImageURL}\n      />)}\n  </ul>\n)\n\nclass ImageGalleryItem extends Component {\n  showModal(src) {\n    const modal = document.getElementById('modal')\n    const modalImg = document.getElementById('modalImg')\n    \n    modal.style.display = 'block'\n    modalImg.src = src\n\n    window.onclick = event => {\n      if (event.target === modal) {\n        modal.style.display = 'none'\n      }\n    }\n  }\n\n  render() {\n    return (\n      <li className=\"ImageGalleryItem\">\n        <img\n          src={this.props.preview}\n          className=\"ImageGalleryItem-image\"\n          onClick={() => this.showModal(this.props.largeImage)}\n        />\n      </li>\n    )\n  }\n}\n\nconst Modal = () => (\n  <div\n    id=\"modal\"\n    className=\"modal\"\n  >\n    <img\n      className=\"modal-content\"\n      id=\"modalImg\"\n    />\n  </div>\n)\n\nclass Button extends Component {\n  query = ''\n  multiplier = 2\n\n  async loadMore() {\n    if (!this.query) {\n      this.query = this.props.query\n    }\n\n    if (this.query !== this.props.query) {\n      this.query = this.props.query\n      this.multiplier = 2\n    }\n\n    const images = await this.props.onSubmit(this.query, this.multiplier++)\n    this.props.loadMore(images)\n\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n      behavior: 'smooth',\n    })\n  }\n\n  render() {\n    return (\n      <button\n        className=\"Button\"\n        onClick={() => this.loadMore()}\n      >\n        Load more...\n      </button>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}